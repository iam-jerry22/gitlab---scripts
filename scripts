stages: 
    # - build
    # - test
    # - sonarqube-check
    # - sonarqube-vulnerability-report
    # - dependencycheck
    # - scascan
    # - trivy file scan
    # - check_target_directory
    - docker
    # - docker_build
    # - docker_tag_push
    - run container

# build-app:
#   stage: build
#   script:
#     - apt update -y
#     - apt install maven -y
#     - mvn clean package

# test-app:
#   stage: test
#   script:
#     - apt update -y
#     - apt install maven -y
#     - mvn clean test

# sonarqube-check:
#   stage: sonarqube-check
#   image: maven:3-eclipse-temurin-17
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#     GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script: 
#     - mvn verify sonar:sonar
#   allow_failure: true
#   only:
#     - merge_requests
#     - master
#     - main
#     - develop

# sonarqube-vulnerability-report:
#   stage: sonarqube-vulnerability-report
#   script:
#     - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=Demo&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
#   allow_failure: true
#   only:
#     - merge_requests
#     - master
#     - main
#     - develop
#   artifacts:
#     expire_in: 1 day
#     reports:
#       sast: gl-sast-sonar-report.json
#   dependencies:
#     - sonarqube-check
  
# dependencycheck:
#     stage: dependencycheck
#     image:
#         name: owasp/dependency-check
#         entrypoint: [""]
# #    before_script:
# #        - mkdir data
# #        - mkdir dependency-check
#     script:
#         - /usr/share/dependency-check/bin/dependency-check.sh --project Test --out . --scan . --enableExperimental --failOnCVSS 7

# sca-scan-app:
#   stage: scascan
#   image: maven:3.8.5-openjdk-11-slim
#   script: |
#       mvn dependency:resolve
#       chmod +x mvnw
#       mvn wrapper:wrapper
#       mvn clean install -Dmaven.test.failure.ignore=true
#       mvn test -fn

# sca-scan-app:
#   stage: scascan
#   image: maven:3.8.5-openjdk-11-slim
#   script: |
#       mvn --version
#       mvn help:evaluate -Dexpression=maven.test.failure.ignore
#       mvn dependency:resolve
#       chmod +x mvnw
#       mvn wrapper:wrapper
#       mvn clean install -fn
#       mvn test -fn

# Trivy file scan:
#   stage: trivy file scan
#   image:
#     name: aquasec/trivy:latest
#     entrypoint: [""]
#   script:
#     - trivy fs .

# check_target_directory:
#   stage: check_target_directory
#   script:
#     - ls -la target

Docker build and push:
  stage: docker
  image:
    name: docker:latest
  services:
    - docker:dind   
  script:
    - docker build -t devops .    
    - docker tag devops:latest nivasheart22/devops:devsecops
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker push nivasheart22/devops:devsecops

# # docker_build:
# #   stage: docker_build
# #   script:
# #     - docker build -t devops .

# # docker_tag_push:
# #   stage: docker_tag_push
# #   script:
# #     - docker tag devops:latest nivasheart22/devops:devsecops
# #     - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
# #     - docker push nivasheart22/devops:devsecops

deploy:
  stage: run container
  tags:
    - secops        #use your own tags 
  script:
    - docker run -d --name secops -p 8082:8082 nivasheart22/devops:devsecops
